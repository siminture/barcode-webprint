{"version":3,"sources":["components/Barcode.js","components/LabelTemplate.jsx","components/LabelList.jsx","components/ErrorBoundary.jsx","App.js","reportWebVitals.js","index.js"],"names":["Barcode","Renderer","renderer","value","options","rendererRef","React","useRef","useEffect","JsBarcode","current","ref","defaultProps","font","LabelTemplate","trackingNumber","fromCity","toCity","toAddress","toContactPhone","toContactMan","className","width","LabelList","items","map","box","key","ErrorBoundary","props","reset","setState","error","state","this","style","color","toString","children","PureComponent","defaultValues","CODE128","CODE128A","CODE128B","CODE128C","EAN13","EAN8","UPC","CODE39","ITF14","ITF","MSI","MSI10","MSI11","MSI1010","MSI1110","pharmacode","App","printContentRef","errorBoundaryRef","useState","format","setFormat","text","setText","setRenderer","labelQty","setLabelQty","printContentVisible","setPrintContentVisible","printContentWrapperStyle","display","margin","boxes","qty","index","push","faker","address","cityName","streetAddress","name","findName","phone","phoneNumber","createBox","height","onChange","event","target","defaultValue","newFormat","type","step","min","max","trigger","content","onAfterPrint","console","log","checked","defaultChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9baeb46a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport JsBarcode from \"jsbarcode\";\r\n\r\nfunction Barcode({ renderer: Renderer, value, ...options }) {\r\n  const rendererRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    value && JsBarcode(rendererRef.current, value, options);\r\n  }, [value, options]);\r\n\r\n  if (value) return <Renderer ref={rendererRef} />;\r\n\r\n  return null;\r\n}\r\n\r\nBarcode.propTypes = {\r\n  renderer: PropTypes.oneOf([\"svg\", \"canvas\", \"img\"]),\r\n  value: PropTypes.string,\r\n  format: PropTypes.string,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  displayValue: PropTypes.bool,\r\n  fontOptions: PropTypes.string,\r\n  font: PropTypes.string,\r\n  textAlign: PropTypes.string,\r\n  textPosition: PropTypes.string,\r\n  textMargin: PropTypes.number,\r\n  fontSize: PropTypes.number,\r\n  background: PropTypes.string,\r\n  lineColor: PropTypes.string,\r\n  margin: PropTypes.number,\r\n  marginTop: PropTypes.number,\r\n  marginBottom: PropTypes.number,\r\n  marginLeft: PropTypes.number,\r\n  marginRight: PropTypes.number,\r\n};\r\n\r\nBarcode.defaultProps = {\r\n  renderer: \"svg\",\r\n  font: \"sans-serif, Arial, Helvetica\",\r\n};\r\n\r\n// function WrappedBarcode(props) {\r\n//   return (\r\n//     <ErrorBoundary>\r\n//       <Barcode {...props} />\r\n//     </ErrorBoundary>\r\n//   );\r\n// }\r\n\r\nexport default Barcode;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Barcode from \"./Barcode\";\r\n\r\nconst LabelTemplate = ({\r\n  trackingNumber,\r\n  fromCity,\r\n  toCity,\r\n  toAddress,\r\n  toContactPhone,\r\n  toContactMan,\r\n}) => {\r\n  return (\r\n    <div className=\"label-wrapper\">\r\n      <div className=\"label\">\r\n        <Barcode value={trackingNumber} width={1.5} />\r\n      </div>\r\n      <div className=\"from-to\">\r\n        <div className=\"from\">{fromCity}</div>\r\n        <div className=\"arrow\">&#8594;</div>\r\n        <div className=\"to\">{toCity}</div>\r\n      </div>\r\n      <div className=\"address\">{toAddress}</div>\r\n      <div className=\"contact\">\r\n        {toContactMan} {toContactPhone}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nLabelTemplate.propTypes = {\r\n  trackingNumber: PropTypes.string,\r\n  fromCity: PropTypes.string,\r\n  toCity: PropTypes.string,\r\n};\r\n\r\nexport default LabelTemplate;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LabelTemplate from \"./LabelTemplate\";\r\n\r\nfunction LabelList({ items }) {\r\n  return items.map((box) => (\r\n    <LabelTemplate {...box} key={box.trackingNumber} />\r\n  ));\r\n}\r\n\r\nLabelList.defaultProps = {\r\n  items: [],\r\n};\r\nLabelList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape(LabelTemplate.propTypes)),\r\n};\r\n\r\nexport default LabelList;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass ErrorBoundary extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error };\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return (\r\n        <div>\r\n          <h3>Something went wrong.</h3>\r\n          <p style={{ color: \"red\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useRef } from \"react\";\nimport ReactToPrint from \"react-to-print\";\nimport LabelList from \"./components/LabelList\";\nimport Barcode from \"./components/Barcode\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport faker from \"faker\";\n\nimport \"./App.css\";\n\nfunction createBox(qty = 5) {\n  const boxes = [];\n\n  for (let index = 1; index <= qty; index++) {\n    boxes.push({\n      trackingNumber: \"XYYTRACKNUMBER\" + index,\n      fromCity: faker.address.cityName(),\n      toCity: faker.address.cityName(),\n      toAddress:faker.address.streetAddress(),\n      toContactMan:faker.name.findName(),\n      toContactPhone:faker.phone.phoneNumber()\n    });\n  }\n  return boxes;\n}\n\nvar defaultValues = {\n  CODE128: \"Example 1234\",\n  CODE128A: \"EXAMPLE\",\n  CODE128B: \"Example text\",\n  CODE128C: \"12345678\",\n  EAN13: \"1234567890128\",\n  EAN8: \"12345670\",\n  UPC: \"123456789999\",\n  CODE39: \"EXAMPLE TEXT\",\n  ITF14: \"10012345000017\",\n  ITF: \"123456\",\n  MSI: \"123456\",\n  MSI10: \"123456\",\n  MSI11: \"123456\",\n  MSI1010: \"123456\",\n  MSI1110: \"123456\",\n  pharmacode: \"1234\",\n};\n\nfunction App() {\n  const printContentRef = useRef();\n  const errorBoundaryRef = useRef();\n\n  const [format, setFormat] = React.useState(\"CODE128\");\n\n  const [text, setText] = React.useState(defaultValues[format]);\n\n  const onTextChange = (event) => {\n    errorBoundaryRef.current.reset();\n    setText(event.target.value);\n  };\n\n  const onFormatChange = (event) => {\n    errorBoundaryRef.current.reset();\n    const newFormat = event.target.value;\n    setFormat(newFormat);\n    setText(defaultValues[newFormat]);\n  };\n\n  const [renderer, setRenderer] = React.useState(\"svg\");\n  const onRendererChange = (event) => {\n    errorBoundaryRef.current.reset();\n    setRenderer(event.target.value);\n  };\n\n  const [labelQty, setLabelQty] = React.useState(5);\n  const onLabelQtyChange = (event) => {\n    setLabelQty(event.target.value);\n  };\n\n  const [printContentVisible, setPrintContentVisible] = React.useState(true);\n  const onPrintContentVisibleChange = (event) => {\n    setPrintContentVisible(event.target.checked);\n  };\n\n  const printContentWrapperStyle = {\n    display: printContentVisible ? \"block\" : \"none\",\n    margin: \"0 auto\",\n  };\n\n  const boxes = createBox(labelQty);\n\n  const onAfterPrint = () => {\n    console.log(\"Print Labels done!\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\", height: \"100%\" }}>\n        <div className=\"left\">\n          <h3>Barcode Sample</h3>\n          <div className=\"row toolbar\">\n            <label>\n              Renderer\n              <select\n                className=\"form-control\"\n                onChange={onRendererChange}\n                defaultValue={renderer}\n              >\n                <option value=\"svg\">svg</option>\n                <option value=\"canvas\">canvas</option>\n                <option value=\"img\">img</option>\n              </select>\n            </label>\n\n            <label>\n              Format\n              <select\n                className=\"form-control\"\n                onChange={onFormatChange}\n                defaultValue={format}\n              >\n                <option value=\"CODE128\">CODE128 auto</option>\n                <option value=\"CODE128A\">CODE128 A</option>\n                <option value=\"CODE128B\">CODE128 B</option>\n                <option value=\"CODE128C\">CODE128 C</option>\n                <option value=\"EAN13\">EAN13</option>\n                <option value=\"EAN8\">EAN8</option>\n                <option value=\"UPC\">UPC</option>\n                <option value=\"CODE39\">CODE39</option>\n                <option value=\"ITF14\">ITF14</option>\n                <option value=\"ITF\">ITF</option>\n                <option value=\"MSI\">MSI</option>\n                <option value=\"MSI10\">MSI10</option>\n                <option value=\"MSI11\">MSI11</option>\n                <option value=\"MSI1010\">MSI1010</option>\n                <option value=\"MSI1110\">MSI1110</option>\n                <option value=\"pharmacode\">Pharmacode</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"row toolbar\">\n            <label>\n              Barcode Text\n              <input\n                className=\"barcode-input form-control\"\n                value={text}\n                onChange={onTextChange}\n              />\n            </label>\n          </div>\n          <div>\n            <ErrorBoundary ref={errorBoundaryRef}>\n              <Barcode\n                value={text}\n                renderer={renderer}\n                font=\"Arial, Helvetica, sans-serif\"\n                format={format}\n              />\n            </ErrorBoundary>\n          </div>\n        </div>\n        <div className=\"right\">\n          <h3>Print Labels</h3>\n          <div className=\"toolbar\">\n            <label>\n              Quantity\n              <input\n                className=\"form-control\"\n                type=\"number\"\n                step={1}\n                min=\"1\"\n                max=\"999\"\n                defaultValue={labelQty}\n                onChange={onLabelQtyChange}\n              />\n            </label>\n            <ReactToPrint\n              trigger={() => {\n                return <button>Print labels</button>;\n              }}\n              content={() => printContentRef.current}\n              onAfterPrint={onAfterPrint}\n            />\n\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={onPrintContentVisibleChange}\n                defaultChecked={printContentVisible}\n              />\n              Show Print content\n            </label>\n          </div>\n          <div style={printContentWrapperStyle}>\n            <div ref={printContentRef}>\n              <LabelList items={boxes} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}